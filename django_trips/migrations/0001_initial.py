# Generated by Django 4.2 on 2025-06-10 15:35

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import django_extensions.db.fields
import django_trips.mixins
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=70)),
                ('slug', models.SlugField(blank=True, max_length=85, null=True, unique=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'Categories',
            },
            bases=(django_trips.mixins.SlugMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Facility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=70, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=85, null=True, unique=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'Facilities',
                'ordering': ['name'],
            },
            bases=(django_trips.mixins.SlugMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Gear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=70, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=85, null=True, unique=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            bases=(django_trips.mixins.SlugMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Host',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('slug', models.SlugField(blank=True, max_length=70, null=True, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('cnic', models.CharField(blank=True, max_length=15, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('mobile', models.CharField(blank=True, max_length=15, null=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('cancellation_policy', models.JSONField(blank=True, default=list, null=True)),
                ('refund_policy', models.JSONField(blank=True, default=list, null=True)),
                ('verified', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['name', 'verified'],
            },
            bases=(django_trips.mixins.SlugMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HostType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('slug', models.SlugField(blank=True, max_length=70, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('slug', models.SlugField(blank=True, null=True, unique=True)),
                ('travel_tips', models.JSONField(default=dict, help_text="Structured travel advice containing sections like 'transport', 'safety', etc.")),
                ('lat', models.FloatField(blank=True, help_text='Latitude coordinate in decimal degrees (WGS84)', null=True)),
                ('lon', models.FloatField(blank=True, help_text='Longitude coordinate in decimal degrees (WGS84)', null=True)),
                ('type', models.CharField(choices=[('TOWN', 'Town'), ('CITY', 'City'), ('PROVINCE', 'Province')], default='TOWN', help_text='Classification of location type', max_length=100)),
                ('importance', models.DecimalField(blank=True, decimal_places=2, help_text='Numerical importance ranking (higher = more significant)', max_digits=3, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this location should be shown publicly')),
            ],
            options={
                'verbose_name': 'Trip Location',
                'verbose_name_plural': 'Trip Locations',
                'ordering': ['name'],
            },
            bases=(django_trips.mixins.SlugMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Trip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Title')),
                ('slug', models.SlugField(blank=True, max_length=255, null=True, unique=True)),
                ('description', models.TextField(blank=True, help_text='Detailed trip description (html supported).', null=True)),
                ('overview', models.TextField(blank=True, help_text='Short summary displayed in listings (plain text)', null=True)),
                ('included', models.TextField(blank=True, help_text='Bullet points of included services/features', null=True)),
                ('excluded', models.TextField(blank=True, help_text='Bullet points of excluded services/features', null=True)),
                ('add_ons', models.TextField(blank=True, help_text='Optional upgrades or special offers', null=True, verbose_name='Additional Information')),
                ('travel_tips', models.JSONField(default=dict, help_text="Tips for travelers on this trip, structured as {'section_title': 'content',}")),
                ('requirements', models.JSONField(default=dict, help_text="User requirements on this trip, Example: {'fitness_level': 'moderate'}")),
                ('child_policy', models.JSONField(default=dict, help_text='Child policy on this trip')),
                ('duration', models.DurationField(blank=True, help_text="Format: DD HH:MM:SS (e.g., '5 00:00:00' for 5 days)", null=True)),
                ('passenger_limit_min', models.PositiveIntegerField(blank=True, default=0, help_text='0 means no minimum requirement', null=True)),
                ('passenger_limit_max', models.PositiveIntegerField(blank=True, default=0, help_text='0 means no maximum limit', null=True)),
                ('age_limit', models.SmallIntegerField(blank=True, default=0, help_text='Minimum age requirement (0 = no restriction)', null=True)),
                ('country', django_countries.fields.CountryField(db_index=True, default='PK', help_text='Primary country where trip operates', max_length=2)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('is_featured', models.BooleanField(default=False, help_text='Display in featured/promoted sections')),
                ('is_pax_required', models.BooleanField(default=True, help_text='Whether passenger count must be specified')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('categories', models.ManyToManyField(help_text="Classification tags (e.g., 'Adventure', 'Family')", related_name='trips', to='django_trips.category')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trips', to=settings.AUTH_USER_MODEL)),
                ('departure', models.ForeignKey(blank=True, help_text='Starting point of the trip', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='departure_trips', to='django_trips.location')),
                ('destination', models.ForeignKey(blank=True, help_text='Primary destination of the trip', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='destination_trips', to='django_trips.location')),
                ('facilities', models.ManyToManyField(help_text='Amenities available during the trip', related_name='trips', to='django_trips.facility')),
                ('gear', models.ManyToManyField(help_text='Equipment provided or required during the trip.', related_name='trips', to='django_trips.gear')),
                ('host', models.ForeignKey(help_text='Organization/guide responsible for the trip', on_delete=django.db.models.deletion.CASCADE, related_name='trips', to='django_trips.host')),
                ('locations', models.ManyToManyField(help_text='All locations visited during the trip', related_name='trips', to='django_trips.location')),
                ('tags', taggit.managers.TaggableManager(help_text='Comma-separated tags for search/filtering', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'ordering': ['-created_at', '-id'],
            },
            bases=(django_trips.mixins.SlugMixin, models.Model),
        ),
        migrations.CreateModel(
            name='TripSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=0, default=0, max_digits=7)),
                ('is_per_person_price', models.BooleanField(default=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('available_seats', models.PositiveSmallIntegerField(default=0)),
                ('booked_seats', models.PositiveSmallIntegerField(default=0)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('cancelled', 'Cancelled'), ('full', 'Fully Booked')], default='draft', max_length=20)),
                ('trip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='django_trips.trip')),
            ],
        ),
        migrations.CreateModel(
            name='TripReviewSummary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meals', models.FloatField(default=0)),
                ('accommodation', models.FloatField(default=0)),
                ('transport', models.FloatField(default=0)),
                ('value_for_money', models.FloatField(default=0)),
                ('overall', models.FloatField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('trip', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='review_summary', to='django_trips.trip')),
            ],
            options={
                'verbose_name_plural': 'Trip review summaries',
            },
        ),
        migrations.CreateModel(
            name='TripReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meals', models.SmallIntegerField(default=0)),
                ('accommodation', models.SmallIntegerField(default=0)),
                ('transport', models.SmallIntegerField(default=0)),
                ('value_for_money', models.SmallIntegerField(default=0)),
                ('overall', models.SmallIntegerField(default=0)),
                ('comment', models.TextField()),
                ('name', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254)),
                ('is_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('trip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='django_trips.trip')),
            ],
        ),
        migrations.CreateModel(
            name='TripPickupLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('additional_price', models.SmallIntegerField(default=0)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_trips.location')),
                ('trip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pickup_locations', to='django_trips.tripschedule')),
            ],
        ),
        migrations.CreateModel(
            name='TripBooking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('number', models.CharField(editable=False, help_text='Auto-generated booking reference number', max_length=16, unique=True)),
                ('full_name', models.CharField(help_text='Full name of the primary contact person', max_length=255)),
                ('email', models.EmailField(help_text='Email address for booking confirmations and updates', max_length=254)),
                ('phone_number', models.CharField(help_text='Contact phone number with country code', max_length=30)),
                ('number_of_persons', models.PositiveIntegerField(default=1, help_text='Total number of participants')),
                ('target_date', models.DateTimeField(blank=True, help_text='Preferred date/time for the trip.', null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('WAITING_PAYMENT', 'Awaiting Payment'), ('CONFIRMED', 'Confirmed'), ('COMPLETED', 'Completed'), ('PARTIAL_PAYMENT', 'Partial Payment'), ('CANCELLED', 'Cancelled')], default='PENDING', help_text='Current status of the booking', max_length=20)),
                ('message', models.TextField(blank=True, help_text='Special requests or additional information', null=True)),
                ('cancelled_at', models.DateTimeField(blank=True, help_text='Timestamp when booking was cancelled (null if active)', null=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this booking (null for guest bookings)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to=settings.AUTH_USER_MODEL)),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='django_trips.tripschedule')),
            ],
            options={
                'verbose_name': 'Trip Booking',
                'verbose_name_plural': 'Trip Bookings',
                'ordering': ('target_date', '-created'),
            },
        ),
        migrations.CreateModel(
            name='TripAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=0, default=0, max_digits=7)),
                ('is_per_person_price', models.BooleanField(default=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('available_seats', models.PositiveSmallIntegerField(default=0)),
                ('type', models.CharField(choices=[('DAILY', 'Daily'), ('WEEKLY', 'Weekly'), ('MONTHLY', 'Monthly'), ('FIX_DATE', 'Fix Date')], default='MONTHLY', max_length=100)),
                ('options', models.JSONField(default=dict)),
                ('trip', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='availabilities', to='django_trips.trip')),
            ],
            options={
                'verbose_name_plural': 'Trip Availabilities',
                'ordering': ['end_date', 'price'],
            },
        ),
        migrations.CreateModel(
            name='RefundPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('change_date', models.DateTimeField(auto_now_add=True, verbose_name='Change date')),
                ('enabled', models.BooleanField(default=False, verbose_name='Enabled')),
                ('description', models.TextField()),
                ('changed_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Changed by')),
            ],
            options={
                'ordering': ('-change_date',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HostRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating_count', models.SmallIntegerField(blank=True, default=0, null=True)),
                ('rated_by', models.SmallIntegerField(blank=True, default=0, null=True)),
                ('host', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='django_trips.host')),
            ],
        ),
        migrations.AddField(
            model_name='host',
            name='type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hosts', to='django_trips.hosttype'),
        ),
        migrations.CreateModel(
            name='CancellationPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('change_date', models.DateTimeField(auto_now_add=True, verbose_name='Change date')),
                ('enabled', models.BooleanField(default=False, verbose_name='Enabled')),
                ('description', models.TextField()),
                ('changed_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Changed by')),
            ],
            options={
                'ordering': ('-change_date',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TripOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('STANDARD', 'Standard Package'), ('BUDGET', 'Standard Package'), ('PREMIUM', 'Premium Package')], default='STANDARD', max_length=20)),
                ('description', models.TextField()),
                ('base_price', models.DecimalField(decimal_places=0, default=0, max_digits=7)),
                ('base_child_price', models.DecimalField(decimal_places=0, default=0, max_digits=7)),
                ('trip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='django_trips.trip')),
            ],
            options={
                'ordering': ['trip', 'name'],
                'unique_together': {('trip', 'name')},
            },
        ),
        migrations.CreateModel(
            name='TripItinerary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_index', models.SmallIntegerField(default=1)),
                ('title', models.CharField(blank=True, max_length=150, null=True)),
                ('description', models.TextField(default='')),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='django_trips.category')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='django_trips.location')),
                ('trip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='itinerary_days', to='django_trips.trip')),
            ],
            options={
                'verbose_name_plural': 'Trip Itineraries',
                'ordering': ['trip', 'day_index'],
                'unique_together': {('trip', 'day_index')},
            },
        ),
        migrations.AddIndex(
            model_name='tripbooking',
            index=models.Index(fields=['status'], name='django_trip_status_3ca34e_idx'),
        ),
        migrations.AddIndex(
            model_name='tripbooking',
            index=models.Index(fields=['schedule'], name='django_trip_schedul_76c58b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='tripavailability',
            unique_together={('trip', 'start_date', 'end_date')},
        ),
        migrations.AddIndex(
            model_name='trip',
            index=models.Index(fields=['is_active'], name='django_trip_is_acti_624c09_idx'),
        ),
        migrations.AddIndex(
            model_name='trip',
            index=models.Index(fields=['is_featured'], name='django_trip_is_feat_a005e5_idx'),
        ),
    ]
